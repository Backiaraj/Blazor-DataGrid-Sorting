@page "/Compare"
@using Syncfusion.Blazor.Grids

@*Custom Sort Comparer
You can customize the default sort action for a specific Grid column by defining the SortComparer property of GridColumn Directive.
The SortComparer data type was the IComparer interface, so the custom sort comparer class should be implemented in the interface IComparer.*@

<SfGrid DataSource="@Orders" AllowSorting="true">
    <GridColumns>
        <GridColumn Field=@nameof(Order.OrderID) Visible="true" HeaderText="Order ID" Width="80"></GridColumn>
        <GridColumn Field=@nameof(Order.CustomerID) SortComparer="new CustomComparer()" HeaderText="Customer Name" Width="120"></GridColumn>
        <GridColumn Field=@nameof(Order.OrderDate) HeaderText=" Order Date" Format="d" Type="ColumnType.Date" Width="100"></GridColumn>
        <GridColumn Field=@nameof(Order.Freight) HeaderText="Freight" Format="C2" Width="80"></GridColumn>
        <GridColumn Field=@nameof(Order.ShipCountry) HeaderText="ShipCountry" Format="C2" Width="100"></GridColumn>
    </GridColumns>
</SfGrid>

@code {
    public List<Order>? Orders { get; set; }

    protected override void OnInitialized()
    {
        Orders = Enumerable.Range(1, 10).Select(x => new Order()
        {
            OrderID = 1000 + x,
            CustomerID = (new string[] { "ALFKI", "ANANTR", "ANTONER", "JOE", "BOSS" })[new Random().Next(5)],
            Freight = 2.1 * x,
            OrderDate = DateTime.Now.AddDays(-x),
            ShipCountry = (new string[] { "USA", "UK", "INDIA", "CHINA", "ENGLAND" })[new Random().Next(5)],
        }).ToList();
    }

    public class Order
    {
        public int? OrderID { get; set; }
        public string? CustomerID { get; set; }
        public DateTime? OrderDate { get; set; }
        public double? Freight { get; set; }
        public string? ShipCountry { get; set; }
    }

    public class CustomComparer : IComparer<Object>
    {
        public int Compare(object? XRowDataToCompare, object? YRowDataToCompare)
        {
            Order? XRowData = XRowDataToCompare as Order;
            Order? YRowData = YRowDataToCompare as Order;
            string? XRowDataOrderID = XRowData?.CustomerID;
            string? YRowDataOrderID = YRowData?.CustomerID;
            if (XRowDataOrderID?.Length < YRowDataOrderID?.Length)
            {
                return -1;
            }
            else if (XRowDataOrderID?.Length > YRowDataOrderID?.Length)
            {
                return 1;
            }
            else
            {
                return 0;
            }
        }
    }
}